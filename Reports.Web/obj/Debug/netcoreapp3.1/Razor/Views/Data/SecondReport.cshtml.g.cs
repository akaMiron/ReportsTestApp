#pragma checksum "C:\Users\Professional\Documents\Reports\Reports.Web\Views\Data\SecondReport.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b0c874ed1ad54772ff7662d1d8a3b3a3d62d8dc5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Data_SecondReport), @"mvc.1.0.view", @"/Views/Data/SecondReport.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Professional\Documents\Reports\Reports.Web\Views\_ViewImports.cshtml"
using Reports.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Professional\Documents\Reports\Reports.Web\Views\_ViewImports.cshtml"
using Reports.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b0c874ed1ad54772ff7662d1d8a3b3a3d62d8dc5", @"/Views/Data/SecondReport.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3c323c7aec57b1c1024fde9382d09944d0bd933c", @"/Views/_ViewImports.cshtml")]
    public class Views_Data_SecondReport : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            DefineSection("head", async() => {
                WriteLiteral("\r\n");
            }
            );
            WriteLiteral(@"
<div class=""container-fluid overflow-auto"">
    <table id=""myDataTable"" class=""display"">
        <thead>
            <tr>
                <th>ArrivalCity</th>
                <th>DepartureCity</th>
                <th>SummaryTrips</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>


");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <link href=""https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css"" rel=""stylesheet"" type=""text/css"" />
    <script src=""https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js""></script>
    <script>
        $(document).ready(function () {
            var groupColumn = 0;
            $('#myDataTable').DataTable({
                processing: true,
                ajax: {
                    url: '/Data/GetSecondReportData',
                    type: 'POST',
                    dataSrc: ''
                },
                columns: [
                    { title: 'Arrival City', data: 'arrivalCity', name: 'arrivalCity' },
                    { title: 'DepartureCity', data: 'departureCity', name: 'DepartureCity' },
                    { title: 'SummaryTrips', data: 'summaryTrips', name: 'summaryTrips' }
                ],
                columnDefs: [
                    { ""visible"": false, ""targets"": groupColumn }
                ],
                order: [[groupColum");
                WriteLiteral(@"n, 'asc']],
                drawCallback: function (settings) {
                    var api = this.api();
                    var rows = api.rows({ page: 'current' }).nodes();
                    var last = null;

                    api.column(groupColumn, { page: 'current' }).data().each(function (group, i) {
                        if (last !== group) {
                            $(rows).eq(i).before(
                                '<tr class=""group""><td colspan=""5"">' + group + '</td></tr>'
                            );
                            last = group;
                        }
                    });
                }
            });

            $('#example tbody').on('click', 'tr.group', function () {
                var currentOrder = table.order()[0];
                if (currentOrder[0] === groupColumn && currentOrder[1] === 'asc') {
                    table.order([groupColumn, 'desc']).draw();
                }
                else {
                    table.order");
                WriteLiteral("([groupColumn, \'asc\']).draw();\r\n                }\r\n            });\r\n        })\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
